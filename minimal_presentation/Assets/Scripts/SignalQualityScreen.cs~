using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using nl.ma.utopiaserver;
using nl.ma.utopiaserver.messages;

// Main Class to manage a utopia BCI connection and the operating phases, Calibrate, Feedback, Prediction etc.
public class UtopiaStimulus : MonoBehaviour
{
    [SerializeField] GameObject cubePrefab;
    GameObject[] cubeArray;
    GameObject optoCube;
    public string instructString;// { get => instructString; set => instructString = value; } 
    [SerializeField] bool showOpto=true;
    [SerializeField] int curTarget;
    PredictedTargetProb ptp = null;
    bool arrayInitialized = false;
    [SerializeField] int nx = 5, ny = 5;               // Dimensions for the 3D List of cubes. Initially 3x3x1, but can be changed in Unity editor.

    [SerializeField] int nCalibrateTrial = 5;
    [SerializeField] int nPredictionTrial = 10;
    [SerializeField] float calibrateTrialDuration = 4;
    [SerializeField] float predictionTrialDuration = 4;
    [SerializeField] float cueDuration = 2;
    [SerializeField] float interTrialDuration = 1;
    [SerializeField] float feedbackDuration = 1;
    [SerializeField] float postCalibrationWaitDuration = 8;
    [SerializeField] float finishingDuration = 8;
    [SerializeField] bool cuedPrediction = false;
    int[] stimState=null;
    int targetStimState=-1;
    bool sendEventp = false;
    static int LOGLEVEL = 0; // level for logging stim info
    long framestart = -1;
    long frameend = -1;

    enum StimState : int { off = 0, on = 1, cue = 2, feedback = 3 };

    enum ExptPhases : int { Connecting = 0, Calibrate = 1, Waiting = 2, Prediction = 3, Finishing = 4 };
    string[] phaseInstruct = { "Connecting to Utopia", "Calibration\nLook at the Green Square", "Waiting for classifier training", "Prediction\nPick the output you want\nFeedback in BLUE\nCue in GREEN","Finishing" };
    ExptPhases experimentPhase = ExptPhases.Connecting;
    int trialNumber = 0;
    long lastframetime = 0;
    UtopiaController utopiaController;
    [SerializeField] static float PREDICTIONTHRESHOLD = .1f;

    // Use this for initialization
    void Start()
    {
        // Sync framerate to monitors refresh rate
        QualitySettings.vSyncCount = 1;
        // init the visual objects
        CreateCubeArray();
        curTarget = 2;
        utopiaController = FindObjectOfType<UtopiaController>();
        StartCoroutine(recordFrameTime());
        instructString = "Starting up...";
    }

    // add a coroutine to record exact time-stamps for the frame rendering..
    public IEnumerator recordFrameTime()
    {
        while ( true) // so we never terminate
        {
            yield return new WaitForEndOfFrame();
            lastframetime = utopiaController.gettimeStamp();
        }
    }

    void CreateCubeArray()
    {
        // get the edges of the window
        Camera cam = FindObjectOfType<Camera>();
        // get the x/y edges of the viewport in 3-d coords.
        Vector3 topleft = cam.ViewportToWorldPoint(new Vector3(0, 1, 10));
        Vector3 botright = cam.ViewportToWorldPoint(new Vector3(1, 0, 10));
        Debug.Log("Viewport coords: " + topleft + "," + botright);
        float x = (botright.x + topleft.x) / 2f;
        float y = (botright.y + topleft.y) / 2f;
        float z = (botright.z + topleft.z) / 2f;
        float w = System.Math.Abs(botright.x - topleft.x);
        float h = System.Math.Abs(botright.y - topleft.y);
        Debug.Log("Viewport: cent(" + x + "," + y + ") sz(" + w +"," + h + ")");

        float stepx = w / nx;
        float stepy = h / ny;
        float step = System.Math.Min(stepx, stepy); // use smaller one for square grid
        cubeArray = new GameObject[nx * ny];
        int oi = 0;
        for (int i = 0; i < nx; i++)
        {
            for (int j = 0; j < ny; j++)
            {
                    // N.B. objects are positioned relative to the *CENTER* of the object.
                    Vector3 newPos = new Vector3(x + (i-nx/2f) * step, y + (j-ny/2)*step, topleft.z);
                    cubeArray[oi] = Instantiate(cubePrefab, newPos, Quaternion.identity, transform);
                    oi++;
            }
        }
        // include the opto-sensor cube, on top left
        if (showOpto)
        {
            var optoPos = topleft;
            optoPos.x += .5f; optoPos.y -= .5f; // shift the center location
            optoCube = Instantiate(cubePrefab, optoPos, Quaternion.identity, transform);
        }

        arrayInitialized = true;
        Debug.Log("Done creating array");
    }

    void OnGUI()
    {
        if (instructString != null)
        {
            GUI.Label(new Rect(10, 100, 600, 600), instructString);
        }
    }

    public void updateCubeState(int[] stimState)
    {
        updateCubeState(stimState, -1);
    }
    public void updateCubeState(int[] stimState, int curTarget)
    {
        int targetState = -1;
        int oi = 0;
        for (int i = 0; i < stimState.Length; i++)
        {
            // set the new state of each object
            if (stimState[i] <= 0)
            {
                cubeArray[i].GetComponent<MeshRenderer>().material.color = Color.black;
            }
            else if (stimState[i] == (int)StimState.on)
            {
                cubeArray[i].GetComponent<MeshRenderer>().material.color = Color.white;
            }
            else if (stimState[i] == (int)StimState.cue)
            {
                cubeArray[i].GetComponent<MeshRenderer>().material.color = Color.green;
            }
            else if (stimState[i] == (int)StimState.feedback)
            {
                cubeArray[i].GetComponent<MeshRenderer>().material.color = Color.blue;
            }
            if (i == curTarget)
            {
                targetState = stimState[i];
                //Debug.Log(targetState);
            }
        }
        // update the opto
        if (showOpto && optoCube != null) {
            if (targetState == (int)StimState.on)
            {
                optoCube.GetComponent<MeshRenderer>().material.color = Color.white;
            } else
            {
                optoCube.GetComponent<MeshRenderer>().material.color = Color.black;
            }
        }   

        // record info on the current cube-state
        this.stimState       = stimState;
        this.targetStimState = targetState;
        string ss="stimState";
        for ( int i=0; i<stimState.Length; i++)
        {
            ss = ss + (stimState[i] > 0 ? "*" : ".");
        }
        ss = ss + " : " + (targetState > 0 ? "*" : ".");
        Debug.Log(ss);
    }

    // Update is called once per frame?
    void Update()
    {
        framestart = utopiaController.gettimeStamp();
        // make the current set of object IDS
        int[] objIDs = new int[cubeArray.Length];
        for (int i = 0; i < objIDs.Length; i++) { objIDs[i] = i+1; }

        // use to filter the active set of flickering game objects
        //cubeArray[1].activeInHierarchy;

        // send the info on the previous frame -- 
        // N.B. do it here to be as soon as possible after the previous frame has rendered
        if (sendEventp)
        {
            utopiaController.sendState(objIDs, stimState, targetStimState, (int)lastframetime);
        }

        if ( LOGLEVEL > 0)
        {
            utopiaController.log("FrameIdx:"+Time.frameCount + " Fliptime:" + frameend + " FlipLB:" + frameend + " FlipUB:" + framestart + " Opto:" + System.Convert.ToInt32(targetStimState==1));
        }

        switch (experimentPhase)
        {
            case ExptPhases.Connecting: // connecting state
                Debug.Log("State: CONNECTING");
                updateConnectingState(objIDs);
                break;
            case ExptPhases.Calibrate: // Calibrate phase
                updateCalibrationState(objIDs);
                break;
            case ExptPhases.Waiting: // waiting
                updateWaitingState(objIDs);
                break;
            case ExptPhases.Finishing: // waiting
                updateFinishingState(objIDs);
                break;
            default: // Prediction Phase
                updatePredictionState(objIDs);
                break;
        }
        frameend = utopiaController.gettimeStamp();
    }

    float timer = 0;
    int epochState = 0;

    void updateConnectingState(int[] objIDs)
    {
        if (!utopiaController.isConnected())
        {
            utopiaController.initConnection();
            sendEventp = false;
            // show blank grid
            int[] objState = new int[objIDs.Length];
            updateCubeState(objState);
        }
        else // move to next phase
        {
            utopiaController.subscribe("PSM"); // only care about prediction/selection messages
            utopiaController.modeChange("idle"); // ensure is in idle mode
            experimentPhase = ExptPhases.Calibrate;
            epochState = 0;
            timer = 0;
        }
    }

    void updateWaitingState(int[] objIDs)
    {
        if (epochState == 0)
        {
            Debug.Log("State: WAITING");
            epochState = 1;
            timer = 0;
            instructString = phaseInstruct[(int)ExptPhases.Waiting];
        }
        timer += Time.deltaTime;
        if (timer < postCalibrationWaitDuration)
        {
            sendEventp = false;
            int[] objState = new int[objIDs.Length];
            updateCubeState(objState);
        }
        else
        {
            experimentPhase = ExptPhases.Prediction;// move to prediction
            epochState = 0;
            timer = 0;
        }
    }

    void updateFinishingState(int[] objIDs)
    {
        if (epochState == 0)
        {
            Debug.Log("State: Finishing");
            epochState = 1;
            timer = 0;
            instructString = phaseInstruct[(int)ExptPhases.Finishing];
        }
        timer += Time.deltaTime;
        if (timer < finishingDuration)
        {
            sendEventp = false;
            int[] objState = new int[objIDs.Length];
            updateCubeState(objState);
        }
        else
        {
            instructString = "Now I am quitting";
            Application.Quit();
        }
    }


    enum PredictionStates : int { init = 0, newTarget, cue, playstimulus, feedback, intertrial };
    void updatePredictionState(int[] objIDs)
    {
        PredictionStates ps = (PredictionStates)epochState;
        if (ps == PredictionStates.init)
        {
            Debug.Log("State: PREDICTION");
            utopiaController.modeChange("Prediction.Static");
            instructString = phaseInstruct[(int)ExptPhases.Prediction];
            epochState = (int)PredictionStates.newTarget;
            timer = 0;
            curTarget = -1;
            trialNumber = 0;
        }
        timer += Time.deltaTime;

        // guard for end of phase
        if (trialNumber >= nPredictionTrial)
        {
            Debug.Log("Done enough Feedback trials.");
            utopiaController.modeChange("shutdown");
            timer = 0;
            epochState = 0;
            experimentPhase = ExptPhases.Finishing; // move to finishing phase
            return;
        }

        // get any new predictions
        // N.B. do this first to minimize latency between
        PredictedTargetProb newptp = utopiaController.getPredictions();
        if (newptp != null) ptp = newptp;
        switch (ps)
        {
            case PredictionStates.newTarget: // newTarget
                Debug.Log("Trial=" + trialNumber + " target=" + curTarget);
                timer = 0;
                ptp = null;
                if ( cuedPrediction )
                { // set new target & move to cue
                    curTarget = (int)(Random.value * cubeArray.Length);
                    epochState = (int)PredictionStates.cue;
                } else
                { // no cue, jump to stimulus
                    curTarget = -1;
                    epochState = (int)PredictionStates.playstimulus;
                }
                break;
            case PredictionStates.cue: // cue
                if (timer < cueDuration)
                {
                    sendEventp = false;
                    int[] objState = new int[objIDs.Length];
                    objState[curTarget] = (int)StimState.cue;
                    updateCubeState(objState, curTarget);
                }
                else
                {
                    utopiaController.newTarget();
                    timer = 0;
                    epochState = (int)PredictionStates.playstimulus;
                }
                break;
            case PredictionStates.playstimulus:
                if (timer < predictionTrialDuration)
                {
                    sendEventp = true;
                    int[] objState = utopiaController.getState(objIDs);
                    // update the display with the current stimulus state info
                    if (objState != null) updateCubeState(objState, curTarget);
                    // if got a prediction and it's sufficient to be above the prediction threshold then
                    // update the display to show this prediction
                    if (ptp != null && ptp.Perr < PREDICTIONTHRESHOLD)
                    { // got a prediction
                        Debug.Log("Selected : " + ptp.Yest);
                        // tell system trial has finished
                        utopiaController.selection(ptp.Yest);
                        // move to feedback
                        timer = 0;
                        epochState = (int)PredictionStates.feedback;
                    }  // normal stimulus play
                }
                else
                {
                    // tell system trial has finished
                    utopiaController.newTarget();
                    timer = 0;
                    epochState = (int)PredictionStates.intertrial;
                }
                break;

            case PredictionStates.feedback:
                if (timer < feedbackDuration)
                {
                    sendEventp = false;
                    // Add any output specific code below here, e.g. pressing a button, stopping stimulus etc.
                    // For now just make the object blue!
                    int[] objState = new int[objIDs.Length];
                    if (curTarget >= 0 && curTarget < objState.Length)
                    {
                        objState[curTarget] = (int)StimState.cue;
                    }
                    if (ptp != null)
                    {
                        int predTarget = ptp.Yest-1;
                        if (predTarget >= 0 && predTarget < objState.Length)
                        {
                            objState[predTarget] = (int)StimState.feedback;
                        }
                    }
                    updateCubeState(objState);
                }
                else
                {
                    // back start new trial
                    epochState = (int)PredictionStates.intertrial;
                    timer = 0;
                    curTarget = -1;
                    trialNumber++;
                }
                break;

            case PredictionStates.intertrial: // inter-trial gap
                if (timer < interTrialDuration)
                {
                    sendEventp = false;
                    int[] objState = new int[objIDs.Length];
                    updateCubeState(objState);
                }
                else
                {
                    trialNumber++; // increment the trial count
                    timer = 0;
                    epochState = (int)PredictionStates.newTarget; // back to new target
                    Debug.Log("Fedback Trial=" + trialNumber);
                }
                break;
        }
    }

    enum CalibrateStates : int { init = 0, newTarget, cue, playstimulus, intertrial }
    void updateCalibrationState(int[] objIDs)
    {
        CalibrateStates cs = (CalibrateStates)epochState;
        if (cs == CalibrateStates.init)
        {
            Debug.Log("State: CALIBRATION");
            utopiaController.modeChange("Calibration.supervised");
            instructString = phaseInstruct[(int)ExptPhases.Calibrate];
            epochState = (int)CalibrateStates.newTarget;
            timer = 0;
            trialNumber = 0;
        }
        timer += Time.deltaTime;

        // guard for end of phase
        if (trialNumber >= nCalibrateTrial)
        {
            utopiaController.modeChange("idle");
            timer = 0;
            epochState = 0;
            experimentPhase = ExptPhases.Waiting; // move to waiting phase
            return;
        }

        switch (cs)
        {
            case CalibrateStates.newTarget: // newTarget
                curTarget = (int)(Random.value * cubeArray.Length);
                timer = 0;
                epochState = (int)CalibrateStates.cue;
                Debug.Log("Trial=" + trialNumber + " target=" + curTarget);
                break;
            case CalibrateStates.cue: // cue
                if (timer < cueDuration)
                {
                    sendEventp = false;
                    int[] objState = new int[objIDs.Length];
                    objState[curTarget] = (int)StimState.cue;
                    updateCubeState(objState, curTarget);
                }
                else
                {
                    //utopiaController.newTarget();
                    timer = 0;
                    epochState = (int)CalibrateStates.playstimulus;
                }
                break;
            case CalibrateStates.playstimulus: // play-stimulus
                if (timer < calibrateTrialDuration)
                {
                    sendEventp = true;
                    int[] objState = utopiaController.getState(objIDs, curTarget);
                    if (objState != null) updateCubeState(objState, curTarget);
                }
                else
                {
                    // BODGE: tell decoder it's the trial end by sending new-target
                    utopiaController.newTarget();
                    timer = 0;
                    epochState = (int)CalibrateStates.intertrial;
                }
                break;
            case CalibrateStates.intertrial: // inter-trial gap
                if (timer < interTrialDuration)
                {
                    sendEventp = false;
                    int[] objState = new int[objIDs.Length];
                    updateCubeState(objState);
                }
                else
                {
                    trialNumber++; // increment the trial count
                    timer = 0;
                    epochState = (int)CalibrateStates.newTarget; // back to new target
                }
                break;
        }

    }

}
